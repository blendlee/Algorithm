# 메뉴 리뉴얼

# 풀이

### 최진혁

```python
from itertools import combinations
from collections import Counter

def solution(orders, course):
    sorted_orders = [sorted(order) for order in orders]    # orders의 각 원소들을 오름차순으로

    answer = []
    for i in course:
        menu = []
        for order in sorted_orders:
            menu += list(combinations(order, i))    # menu 리스트에 가능한 요리 조합을 입력

        counter = Counter(menu)    # 각각 요리 조합의 개수를 계산
        if not counter:    # 코스를 만들기 위한 요리 개수만큼 주문한 사람이 없다면 다음으로
            continue
        sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)    # 요리 조합 개수 기준으로 내림차순 정렬
        if sorted_counter[0][1] < 2:    # 가장 개수가 많은 조합이 2개 보다 적으면 다음으로
            continue

        answer.append(''.join(sorted_counter[0][0]))    # 가장 개수가 많은 조합을 answer에 입력
        for key, value in sorted_counter[1:]:
            if value == sorted_counter[0][1]:    # 다음 조합의 개수도 최대값이면 answer에 입력
                answer.append(''.join(key))
            else:
                break
                
    return sorted(answer)
```

![K-012.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/43cf5e48-30b1-4ce4-9094-1f315f465d5b/K-012.jpg)

### 김덕래

```python
from itertools import combinations
def solution(orders, course):
    answer = []
    for c in course:
        dict_ = {}
        for o in orders:
            for com in combinations(o,c):
                com = ''.join(sorted(com))
                if com not in dict_:
                    dict_[com]=1
                else:
                    dict_[com]+=1
        if dict_:
            m = max(dict_.values())
            if m>1:
                answer += [k for k,v in dict_.items() if v == m]
    return sorted(answer)
```

### 이두호

```python
# 생각이 잘 나지 않아서 덕래님 코드를 바탕으로 다시 작성했습니다.

from itertools import combinations

def solution(orders, course):
    result = []
    
    for cnt in course:
        foods = dict()
        
        for dishes in orders:
            for case in combinations(dishes, cnt):
                case = ''.join(sorted(case)) # orders 는 순서 보장 안됨
                
                # is => value / no => 0
                if foods.get(case):
                    foods[case] += 1
                else:
                    foods[case] = 1
        
        if foods:
            best = max(foods.values())
            if best > 1:
                # +=  << append, extend
                result.extend([k for k, v in foods.items() if v == best])
    
    return sorted(result)
```

### 이승환

```python
from itertools import combinations

def solution(orders, course):
    for i in range(len(orders)):
        orders[i]=sorted(orders[i])
    answer={}
    for numbers in course:
        answer[numbers]={}
        menu_sets=[]
        for order in orders:
            menu_sets += list(combinations(order,numbers))
        menu_sets=list(set(menu_sets))
        for menu_set in menu_sets:
            menu_set ='' .join(menu_set)
            for order in orders:
                contains=True
                for m in menu_set:
                    if m not in order:
                        contains=False
                if contains:
                    if menu_set in answer[numbers]:
                        answer[numbers][menu_set] +=1
                    else :
                        answer[numbers][menu_set]=1

    result=[]
    for numbers in course:
        result += [k for k,v in answer[numbers].items() if max(answer[numbers].values()) == v and  max(answer[numbers].values()) >1]
    result.sort()
    return result
```

### 조혁준

```python
from itertools import combinations
from collections import Counter

def solution(orders, courses):
    answer = []
    
    for course in courses:
        tar = []
        for order in orders:
            tar.extend(list(combinations(''.join(sorted(order)), course)))
        cnt = Counter(tar)
        if len(cnt.values()) !=0: max_val=max(cnt.values())
        answer.extend([''.join(key) for key, value in cnt.items() if value >= 2 and value == max_val])
    answer = sorted(answer)
    
    return answer
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f184f16d-a2e5-4ec2-a697-8f9c80733ee2/Untitled.png)


import sys
import heapq

n,e =map(int,input().split())

INF=1e9
graph=[[] for _ in range(n+1)]


for i in range(e):
    a,b,c=map(int,input().split())
    graph[a].append((b,c))
    graph[b].append((a,c))

v1,v2 = map(int,input().split())

def dijkstra(start):
    distance=[INF]*(n+1)
    q=[]
    heapq.heappush(q,(0,start))
    distance[start]=0
    

    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist :
            continue
        for i in graph[now]:
            cost = dist +i[1]
            if cost < distance[i[0]] :
                distance[i[0]] = cost
                heapq.heappush(q,(cost,i[0]))

    return distance

answer= min(dijkstra(1)[v1] + dijkstra(v1)[v2] + dijkstra(v2)[n],dijkstra(1)[v2] + dijkstra(v2)[v1] + dijkstra(v1)[n])
print(answer) if answer < INF else print(-1)

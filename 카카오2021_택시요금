import heapq
INF=1e9


def dijkstra(start,graph,n):
    distance=[INF]*(n+1)
    q=[]
    heapq.heappush(q,(0,start))
    distance[start]=0
    while q:
        dist, now = heapq.heappop(q)
        if distance[now] < dist :
            continue
        for i in graph[now]:
            cost = dist +i[1]
            if cost < distance[i[0]] :
                distance[i[0]] = cost
                heapq.heappush(q,(cost,i[0]))
    return distance



def solution(n, s, a, b, fares):
    graph=[[] for _ in range(n+1)]
    minimum=INF
    for x,y,z in fares:
        graph[x].append((y,z))
        graph[y].append((x,z))
    for k in range(1,n+1):
        minimum = min(dijkstra(s,graph,n)[k]+dijkstra(k,graph,n)[a]+dijkstra(k,graph,n)[b] , minimum)

    answer = min(dijkstra(s,graph,n)[a]+dijkstra(a,graph,n)[b] , dijkstra(s,graph,n)[b]+dijkstra(b,graph,n)[a],minimum)
    return answer

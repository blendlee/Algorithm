from collections import deque

dx=[1,0,-1,0]
dy=[0,1,0,-1]
def attack_bfs(r1,c1,r2,c2,degree,board):
    visited=[[False]*(c2-c1+1) for _ in range(r2-r1+1)]
    q = deque()
    q.append((r1,c1))
    visited[0][0]= True
    board[r1][c1] -= degree
    while q:
        r,c = q.popleft()
        for i in range(4):
            nr = r+ dx[i]
            nc = c +dy[i]
            if  r1<=nr <=r2 and c1 <=nc <=c2 :
                if visited[nr-r1][nc-c1] == False:
                    visited[nr-r1][nc-c1]= True
                    q.append((nc,nr))
                    board[nr][nc] -= degree
                    
        
def heal_bfs(r1,c1,r2,c2,degree,board):
    visited=[[False]*(c2-c1+1) for _ in range(r2-r1+1)]
    q = deque()
    q.append((r1,c1))
    visited[0][0]= True
    board[r1][c1] += degree
    while q:
        r,c = q.popleft()
        for i in range(4):
            nr = r + dx[i]
            nc = c +dy[i]
            if  r1<=nr <=r2 and c1 <=nc <=c2 :
                if visited[nr-r1][nc-c1] == False:
                    visited[nr-r1][nc-c1]= True
                    q.append((nr,nc))
                    board[nr][nc] += degree

def solution(board,skill):
    for sk in skill :
        t ,r1,c1,r2,c2,degree = sk
        if t == 1 :
            attack_bfs(r1,c1,r2,c2,degree,board)
            print(board)
        else:
            heal_bfs(r1,c1,r2,c2,degree,board)
            print(board)
    count=0
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] >= 1 :
                count+=1
    print(board)
    return count

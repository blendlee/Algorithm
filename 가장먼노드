import heapq
INF=1e9


def solution(n, edge):
    distance=[INF]*(n+1)
    graph=[[] for _ in range(n+1)]
    for x,y in edge:
        graph[x].append((y,1))
        graph[y].append((x,1))
    q=[]
    heapq.heappush(q,(1,0))
    distance[1] = 0
    while q:
        now, dist = heapq.heappop(q)
        if dist > distance[now]:
            continue
        for i in graph[now]:
            cost =dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q,(i[0],distance[i[0]]))
    distance[0]=0
    answer= distance.count(max(distance))
    return answer

from collections import deque


m,n = map(int,input().split())
graph=[]
tomatoes=[]
start=True
for i in range(n):
    a=list(map(int,input().split()))
    for j in range(m):
        if a[j] == 0:
            start=False
        if a[j]==1:
            tomatoes.append((i,j))
    graph.append(a)

visited=[[False]*m for _ in range(n)]
q=deque()
for x,y in tomatoes:
    q.append((0,x,y))
    visited[x][y]=True


dx=[1,-1,0,0]
dy=[0,0,1,-1]


while q:
    day,x,y= q.popleft()
    for i in range(4):
        nx=x+dx[i]
        ny=y+dy[i]
        if 0 <= nx <n and 0<= ny <m :
            if not visited[nx][ny] and graph[nx][ny]==0:
                graph[nx][ny]=day+1
                q.append((day+1,nx,ny))


def find(graph):
    if start:
        return 0
    answer=0
    for i in range(n):
        answer=max(max(graph[i]),answer)
        for j in range(m):
            if graph[i][j] == 0:
                return -1

    return answer
print(find(graph))

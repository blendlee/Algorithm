
from collections import deque

def solution(fees, records):
    cars=[]
    for i in range(len(records)):
        record=[]
        
        l=-1
        for j in range(len(records[i])):
            if records[i][j] == ' ' :
                record.append(records[i][l+1:j])
                l=j
        record.append(records[i][l+1:j+1])
        times=int(record[0][:2])*60 +int(record[0][3:])
        number=int(record[1])
        if record[2] == 'IN':
            status=1
        else :
            status=0
        cars.append((number,times,status))

    cars.sort(key= lambda x : (x[0],x[1],-x[2]))

    inout=[]
    for i in range(len(cars)):
        if cars[i][2]== 1:
            inout.append(cars[i][0])
        else:
            inout.remove(cars[i][0])
    for i in inout:
        cars.append((i,1439,0))

    
    cars.sort(key= lambda x : (x[0],x[1],-x[2]))



    a=deque()
    b=deque()

    car=[]

    for i in range(len(cars)):
        if cars[i][0] not in car:
            car.append(cars[i][0])
        if cars[i][2] == 1 :
            a.append(cars[i])
        else:
            b.append(cars[i])

    answer=[0]*(len(car))

    time=[0]*(len(car))

    while a:
        inx,iny,inz = a.popleft()
        outx,outy,outz = b.popleft()
        time[car.index(outx)] += int(outy-iny)

    for i in range(len(time)):
        if time[i] <= fees[0]:
            answer[i] = fees[1]
        else:
            if (time[i]-fees[0])%fees[2] != 0:
                answer[i] = (fees[1]+(((time[i]-fees[0])//fees[2])+1)*fees[3])
            else:
                answer[i] = fees[1]+((time[i]-fees[0])//fees[2])*fees[3]
    return answer

from functools import partialmethod
import heapq
from itertools import permutations

board= [[1,0,0,3],[2,0,0,0],[0,0,0,2],[3,0,1,0]]
r,c=1,0


board1 =[[3,0,0,2],[0,0,1,0],[0,1,0,0],[2,0,0,3]]
r1,c1=0,1




dx=[1,0,-1,0]
dy=[0,1,0,-1]


def bfs(board,x,y):
    distance=[[-1]*4 for _ in range(4)]
    distance[x][y]=0
    q=[]
    heapq.heappush(q,(distance[x][y],x,y))

    while q :
        dist ,x ,y  = heapq.heappop(q)
        for i in range(4):
            for k in range(1,4):
                nx=x+dx[i]*k
                ny=y+dy[i]*k
                if 0<= nx< 4 and 0 <= ny <4 :
                    if distance[nx][ny] == -1 :
                        if board[nx][ny] != 0 :
                            distance[nx][ny] = dist+1
                            heapq.heappush(q,(distance[nx][ny],nx,ny))      
                            break                    
                        if k >= 2 :
                            if dx[i] != 0 :
                                if nx != 0 and nx != 3 :
                                    continue
                            if dy[i] != 0 :
                                if ny != 0 and ny != 3 :
                                    continue
                        distance[nx][ny] = dist+1
                        heapq.heappush(q,(distance[nx][ny],nx,ny))

    return distance

    
def get_nearest(x,y,k,targets):
    a =targets[k][0][0]
    b = targets[k][0][1]
    c=targets[k][1][0]
    d=targets[k][1][1]

    if min(bfs(board,x,y)[a][b], bfs(board,x,y)[c][d]) == bfs(board,x,y)[c][d] :
        return (c,d,a,b)
    else :
        return (a,b,c,d)

def solution(board, r, c):
    targets = [ [] for _ in range(7)]
    t=[]
    for k in range(1,7):
        for i in range(4):
            for j in range(4):
                if board[i][j] == k :
                    targets[k].append((i,j))
                    if k not in t :
                        t.append(k)

    p=2*len(t)
    t = list(permutations(t,len(t)))

    minimum=1e9
    for target in t :
        dist=0
        for i in target:
            x,y , lx,ly = get_nearest(r,c,i,targets)
            dist += bfs(board,r,c)[x][y]
            dist += bfs(board,x,y)[lx][ly]
            r ,c = lx,ly
            board[x][y] =0
            board[lx][ly] =0
        minimum = min(dist,minimum)

    return minimum+p
print(solution(board, r, c))
